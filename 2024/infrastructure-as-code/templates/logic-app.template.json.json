{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "workflowName": {
      "type": "string"
    },
    "enableSystemIdentity": {
      "type": "bool",
      "defaultValue": true
    },
    "enableUserIdentity": {
      "type": "bool",
      "defaultValue": false
    },
    "userIdentity": {
      "type": "string",
      "defaultValue": ""
    },
    "workflowEnabled": {
      "type": "bool",
      "defaultValue": true
    },
    "sentinelConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "eventHubConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "monitorConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "office365Connection": {
      "type": "bool",
      "defaultValue": false
    },
    "wdatpConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "teamsConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "automationConnection": {
      "type": "bool",
      "defaultValue": false
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": ""
    },
    "workspaceKey": {
      "type": "securestring",
      "defaultValue": ""
    },
    "blobAccountName": {
      "type": "string",
      "defaultValue": ""
    },
    "blobAccountAccessKey": {
      "type": "securestring",
      "defaultValue": ""
    },
    "keyVaults": {
      "type": "array",
      "defaultValue": []
    },
    "apiTenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]"
    },
    "apiClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "apiClientSecret": {
      "type": "securestring",
      "defaultValue": ""
    },
    "eventHubConnectionString": {
      "type": "securestring",
      "defaultValue": ""
    },
    "alertDescription": {
      "type": "string",
      "defaultValue": "This is a metric alert",
      "metadata": {
        "description": "Description of alert"
      }
    },
    "alertSeverity": {
      "type": "int",
      "defaultValue": 3,
      "allowedValues": [
        0,
        1,
        2,
        3,
        4
      ],
      "metadata": {
        "description": "Severity of alert {0,1,2,3,4}"
      }
    },
    "isEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether the alert is enabled"
      }
    },
    "metricName": {
      "type": "string",
      "defaultValue": "RunsFailed",
      "minLength": 1,
      "metadata": {
        "description": "Name of the metric used in the comparison to activate the alert."
      }
    },
    "operator": {
      "type": "string",
      "defaultValue": "GreaterThanOrEqual",
      "allowedValues": [
        "Equals",
        "GreaterThan",
        "GreaterThanOrEqual",
        "LessThan",
        "LessThanOrEqual"
      ],
      "metadata": {
        "description": "Operator comparing the current value with the threshold value."
      }
    },
    "threshold": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The threshold value at which the alert is activated."
      }
    },
    "timeAggregation": {
      "type": "string",
      "defaultValue": "Count",
      "allowedValues": [
        "Average",
        "Minimum",
        "Maximum",
        "Total",
        "Count"
      ],
      "metadata": {
        "description": "How the data that is collected should be combined over time."
      }
    },
    "windowSize": {
      "type": "string",
      "defaultValue": "PT5M",
      "allowedValues": [
        "PT1M",
        "PT5M",
        "PT15M",
        "PT30M",
        "PT1H",
        "PT6H",
        "PT12H",
        "PT24H"
      ],
      "metadata": {
        "description": "Period of time used to monitor alert activity based on the threshold. Must be between one minute and one day. ISO 8601 duration format."
      }
    },
    "evaluationFrequency": {
      "type": "string",
      "defaultValue": "PT1M",
      "allowedValues": [
        "PT1M",
        "PT5M",
        "PT15M",
        "PT30M",
        "PT1H"
      ],
      "metadata": {
        "description": "how often the metric alert is evaluated represented in ISO 8601 duration format"
      }
    },
    "autoMitigate": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "managedIdentity": "[if(parameters('enableSystemIdentity'), json('{\"type\":\"SystemAssigned\"}'), if(parameters('enableUserIdentity'), json(concat('{\"type\":\"UserAssigned\", \"userAssignedIdentities\": { \"', ResourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userIdentity')),'\": {} } }')), json('null')))]",
    "workflowEnabled": "[if(parameters('workflowEnabled'), 'Enabled', 'Disabled')]"
  },
  "resources": [
    {
      "condition": "[parameters('sentinelConnection')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-azuresentinel-mi",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "api-connection-azuresentinel-mi",
        "customParameterValues": {},
        "parameterValueType": "Alternative",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azuresentinel')]"
        }
      }
    },
    {
      "condition": "[and(parameters('automationConnection'), greater(length(parameters('apiTenantId')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-automation",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "api-connection-automation",
        "customParameterValues": {},
        "parameterValueType": "Alternative",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azureautomation')]"
        }
      }
    },
    {
      "condition": "[and(parameters('monitorConnection'), greater(length(parameters('apiTenantId')), 0), greater(length(parameters('apiClientId')), 0), greater(length(parameters('apiClientSecret')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-azuremonitorlogs",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[parameters('apiClientId')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azuremonitorlogs')]"
        },
        "parameterValues": {
          "token:grantType": "client_credentials",
          "token:TenantId": "[parameters('apiTenantId')]",
          "token:clientId": "[parameters('apiClientId')]",
          "token:clientSecret": "[parameters('apiClientSecret')]"
        }
      }
    },
    {
      "condition": "[and(greater(length(parameters('workspaceId')), 0), greater(length(parameters('workspaceKey')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-azuremonitordataconnector",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "api-connection-azuremonitordataconnector",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azureloganalyticsdatacollector')]"
        },
        "parameterValues": {
          "username": "[parameters('workspaceId')]",
          "password": "[parameters('workspaceKey')]"
        }
      }
    },
    {
      "condition": "[and(parameters('eventHubConnection'), greater(length(parameters('eventHubConnectionString')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-eventhubs",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "[toLower(split(split(parameters('eventHubConnectionString'), '.')[0], '/')[2])]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/eventhubs')]"
        },
        "parameterValues": {
          "connectionString": "[parameters('eventHubConnectionString')]"
        }
      }
    },
    {
      "condition": "[parameters('office365Connection')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-office365",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "office365",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/office365')]"
        }
      }
    },
    {
      "condition": "[parameters('wdatpConnection')]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-wdatp",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "wdatp",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/wdatp')]"
        }
      }
    },
    {
      "condition": "[and(parameters('teamsConnection'), greater(length(parameters('apiTenantId')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "api-connection-teams",
      "location": "[parameters('location')]",
      "properties": {
        "displayName": "api-connection-teams",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/teams')]"
        },
        "parameterValues": {
          "token:TenantId": "[parameters('apiTenantId')]"
        }
      }
    },
    {
      "condition": "[and(greater(length(parameters('blobAccountName')), 0), greater(length(parameters('blobAccountAccessKey')), 0))]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[parameters('location')]",
      "name": "[concat('api-connection-blob-', parameters('blobAccountName'))]",
      "properties": {
        "displayName": "[concat('api-connection-blob-', parameters('blobAccountName'))]",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/azureblob')]"
        },
        "parameterValues": {
          "accountName": "[parameters('blobAccountName')]",
          "accessKey": "[parameters('blobAccountAccessKey')]"
        }
      }
    },
    {
      "condition": "[greater(length(parameters('keyVaults')), 0)]",
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "location": "[parameters('location')]",
      "copy": {
        "count": "[length(parameters('keyVaults'))]",
        "mode": "Parallel",
        "name": "keyVaultConnections"
      },
      "name": "[concat('api-connection-keyvault-', if(equals(length(parameters('keyVaults')), 0), 'dummy', parameters('keyVaults')[copyIndex('keyVaultConnections')]))]",
      "properties": {
        "displayName": "[concat('api-connection-keyvault-', if(equals(length(parameters('keyVaults')), 0), 'dummy', parameters('keyVaults')[copyIndex('keyVaultConnections')]))]",
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('location'), '/managedApis/keyvault')]"
        },
        "parameterValueType": "Alternative",
        "alternativeParameterValues": {
          "vaultName": "[parameters('keyVaults')[copyIndex('keyVaultConnections')]]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2016-10-01",
      "name": "[parameters('workflowName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "api-connection-azuresentinel-mi",
        "api-connection-azuremonitorlogs",
        "api-connection-eventhubs",
        "api-connection-office365",
        "api-connection-wdatp",
        "api-connection-teams",
        "api-connection-azuremonitordataconnector",
        "[concat('api-connection-blob-', parameters('blobAccountName'))]",
        "keyVaultConnections"
      ],
      "identity": "[variables('managedIdentity')]",
      "properties": {
        "state": "[variables('workflowEnabled')]",
        "definition": {},
        "parameters": {}
      }
    }
  ],
  "outputs": {
    "logicAppResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Logic/workflows', parameters('workflowName'))]"
    },
    "logicAppCallbackUrl": {
      "type": "string",
      "value": "[listCallbackUrl(resourceId('Microsoft.Logic/workflows', parameters('workflowName')), '2016-06-01').basePath]"
    },
    "logicAppSystemIdentity": {
      "condition": "[parameters('enableSystemIdentity')]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflowName')), '2016-10-01', 'full').identity.principalId]"
    },
    "logicAppDefinition": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflowName')), '2016-10-01').definition]"
    },
    "logicAppParameters": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflowName')), '2016-10-01').parameters]"
    },
    "logicAppEndpointConfiguration": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflowName')), '2016-10-01').endpointsConfiguration]"
    }
  }
}